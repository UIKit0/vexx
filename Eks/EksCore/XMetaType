#ifndef XMETATYPE_
#define XMETATYPE_

#include "XGlobal"
#include "XMacroHelpers"

#define X_DECLARE_METATYPE(type) \
template <> \
class XMetaTypeId<type> \
  { \
public: \
  static XMetaType::Type typeOf() \
    { \
    static XMetaType::Type ret = XMetaType::addType<type>(#type); \
    return ret; \
    } \
  };

#define X_DECLARE_SERIALISABLE_METATYPE(type) \
template <> \
class XMetaTypeId<type> \
  { \
public: \
  static XMetaType::Type typeOf() \
    { \
    static XMetaType::Type ret = XMetaType::addSerialisableType<type>(#type); \
    return ret; \
    } \
  };

#define X_DECLARE_CONVERTABLE_METATYPE(type) \
template <> \
class XMetaTypeId<type> \
  { \
public: \
  static XMetaType::Type typeOf() \
    { \
    static XMetaType::Type ret = XMetaType::addConverableType<type>(#type); \
    return ret; \
    } \
  };

#define X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(type) \
template <> \
class XMetaTypeId<type> \
  { \
public: \
  static XMetaType::Type typeOf() \
    { \
    static XMetaType::Type ret = XMetaType::addConvertableSerialisableType<type>(#type); \
    return ret; \
    } \
  };

template <typename T> class XMetaTypeId
  {
  };

class EKSCORE_EXPORT XMetaType
  {
  public:
    typedef xuint32 Type;
    enum
      {
      Null = 351276
      };

private:
  typedef void *(*Constructor)(const void *, void *);
  typedef void (*Destructor)(void *, bool);
  typedef void *(*Assigner)(void *, const void *);
  typedef void (*Compactor)(QDataStream &, const void *);
  typedef void (*Extractor)(QDataStream &, void *);
  typedef void (*Convertor)(const void *, Type, void **);

public:
  static void *construct(Type);
  static void *copy(Type, const void *);
  static void *copy(Type, const void *ptr, void *dst);
  static void assign(Type, void *dst, const void *ptr);
  static void destroy(Type, void *, bool shouldDelete = true);

  static void *convert(Type, const void *ptr, Type);
  static void convert(Type, const void *ptr, Type, void *output);

  static void compact(QDataStream &, Type, const void *);
  static void extract(QDataStream &, Type, void *);

  template <typename T> static Type typeOf(const T &)
    {
    return XMetaTypeId<T>::typeOf();
    }

  template <typename T> static Type typeOf()
    {
    return XMetaTypeId<T>::typeOf();
    }

  static Type typeOf(const char *);

  template <typename T> static size_t sizeOf()
    {
    return sizeOf(typeOf<T>());
    }

  static size_t sizeOf(Type);
  static size_t sizeOf(const char *);

  template <typename T> static Type addType(const char *name)
    {
    typedef void*(*ConstructPtr)(const T*, T *);
    ConstructPtr ctor = constructHelper<T>;
    typedef void(*DestuctrPtr)(T*, bool);
    DestuctrPtr dtor = deleteHelper<T>;
    typedef void(*AssignPtr)(T *, const T*);
    AssignPtr ass = assignHelper<T>;

    return addType(name,
                   sizeof(T),
                   reinterpret_cast<Constructor>(ctor),
                   reinterpret_cast<Destructor>(dtor),
                   reinterpret_cast<Assigner>(ass),
                   0, 0, 0);
    }

  template <typename T> static Type addSerialisableType(const char *name)
    {
    typedef void*(*ConstructPtr)(const T*, T *);
    ConstructPtr ctor = constructHelper<T>;
    typedef void(*DestuctrPtr)(T*, bool);
    DestuctrPtr dtor = deleteHelper<T>;
    typedef void(*AssignPtr)(T *, const T*);
    AssignPtr ass = assignHelper<T>;
    typedef QDataStream &(*CompactorPtr)(QDataStream &, const T*);
    CompactorPtr serialise = compactorHelper<T>;
    typedef QDataStream &(*ExtractorPtr)(QDataStream &, T*);
    ExtractorPtr deserialise = extractorHelper<T>;

    return addType(name,
                   sizeof(T),
                   reinterpret_cast<Constructor>(ctor),
                   reinterpret_cast<Destructor>(dtor),
                   reinterpret_cast<Assigner>(ass),
                   reinterpret_cast<Compactor>(serialise),
                   reinterpret_cast<Extractor>(deserialise),
                   0);
    }

  template <typename T> static Type addConvertableType(const char *name)
    {
    typedef void*(*ConstructPtr)(const T*, T *);
    ConstructPtr ctor = constructHelper<T>;
    typedef void(*DestuctrPtr)(T*, bool);
    DestuctrPtr dtor = deleteHelper<T>;
    typedef void(*AssignPtr)(T *, const T*);
    AssignPtr ass = assignHelper<T>;
    typedef void (*ConvertPtr)(const T *, Type, void **);
    ConvertPtr convert = convertHelper<T>;

    return addType(name,
                   sizeof(T),
                   reinterpret_cast<Constructor>(ctor),
                   reinterpret_cast<Destructor>(dtor),
                   reinterpret_cast<Assigner>(ass),
                   0, 0,
                   reinterpret_cast<Convertor>(convert));
    }

  template <typename T> static Type addConvertableSerialisableType(const char *name)
    {
    typedef void*(*ConstructPtr)(const T*, T *);
    ConstructPtr ctor = constructHelper<T>;
    typedef void(*DestuctrPtr)(T*, bool);
    DestuctrPtr dtor = deleteHelper<T>;
    typedef void(*AssignPtr)(T *, const T*);
    AssignPtr ass = assignHelper<T>;
    typedef QDataStream &(*CompactorPtr)(QDataStream &, const T*);
    CompactorPtr serialise = compactorHelper<T>;
    typedef QDataStream &(*ExtractorPtr)(QDataStream &, T*);
    ExtractorPtr deserialise = extractorHelper<T>;
    typedef void (*ConvertPtr)(const T *, Type, void **);
    ConvertPtr convert = convertHelper<T>;

    return addType(name,
                   sizeof(T),
                   reinterpret_cast<Constructor>(ctor),
                   reinterpret_cast<Destructor>(dtor),
                   reinterpret_cast<Assigner>(ass),
                   reinterpret_cast<Compactor>(serialise),
                   reinterpret_cast<Extractor>(deserialise),
                   reinterpret_cast<Convertor>(convert));
    }


  template <typename T> static void set(void *op, const T &val)
    {
    *((T*)op) = val;
    }

private:
  XMetaType();
  X_DISABLE_COPY(XMetaType);

  static Type addType(const char *name, size_t size, Constructor ctor, Destructor dtor, Assigner ass,
                      Compactor compact, Extractor extract,
                      Convertor convert);

  template <typename T> static void *constructHelper(const T *t, T *dst)
    {
    if(t)
      {
      if(dst)
        {
        new(dst) T(*t);
        return dst;
        }
      return new T(*t);
      }

    if(dst)
      {
      new(dst) T();
      return dst;
      }

    return new T();
    }

  template <typename T> static void assignHelper(T *dst, const T *t)
    {
    *dst = *t;
    }

  template <typename T> static void deleteHelper(T *t, bool shouldDel)
    {
    if(shouldDel)
      {
      delete t;
      }
    else
      {
      t->~T();
      }
    }

  template <typename T> static void convertHelper(const T *t, Type outputType, void **ptr)
    {
    if(!(*ptr))
      {
      *ptr = XMetaType::construct(outputType);
      }
    xMetaConvert(*t, outputType, *ptr);
    }

  template <typename T> static QDataStream &compactorHelper(QDataStream &str, const T *t)
    {
    return str << (*t);
    }

  template <typename T> static QDataStream &extractorHelper(QDataStream &str, T *t)
    {
    return str >> (*t);
    }

  friend class XMetaTypeData;
  };

#include "QString"
#include "XList"
#include "QDebug"

EKSCORE_EXPORT void xMetaConvert(const QString &, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(bool, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(xint32, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(xuint32, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(xint64, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(xuint64, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(float, XMetaType::Type destination, void *);
EKSCORE_EXPORT void xMetaConvert(double, XMetaType::Type destination, void *);

X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(QString);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(bool);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(xint32);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(xuint32);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(xint64);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(xuint64);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(float);
X_DECLARE_CONVERTABLE_SERIALISABLE_METATYPE(double);

#endif // XMETATYPE_
