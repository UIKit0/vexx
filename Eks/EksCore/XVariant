#if 0
#ifndef XVARIANT_H
#define XVARIANT_H

#include "QDebug"
#include "XGlobal"
#include "XMetaType"
#include "XShared"
#include "XList"
#include "XVector"
#include "XMap"
#include "QString"
#include "XVector2D"
#include "XVector3D"
#include "XVector4D"
#include "XColour"
#include "XQuaternion"

class XVariant;

typedef XList<XVariant> XVariantList;
typedef XVector<XVariant> XVariantVector;
typedef XMap<QString, XVariant> XVariantMap;

X_DECLARE_METATYPE(XVariantList);
X_DECLARE_METATYPE(XVariantVector);
X_DECLARE_METATYPE(XVariantMap);

EKSCORE_EXPORT void xInitiateMetaTypes();

class EKSCORE_EXPORT XVariant
  {
public:
  XVariant();
  XVariant(const XVariant &);
  ~XVariant();

  bool isNull();
  XMetaType::Type type() const;

  template <typename T> XVariant( const T &ref );
  template <typename T> XVariant &operator=(const T &cpy);

  template <typename T> bool is() const { return is(XMetaType::typeOf<T>()); }
  bool is( XMetaType::Type t ) const;

  template <typename T> void setValue( const T & );
  template <typename T> T valueAs() const;
  template <typename T> const T &value() const;
  template <typename T> T &value();

#define X_VALUE(type, name) type to##name() const { return valueAs<type>(); } void set##name(type t) { setValue<type>(t); }
#define X_REFERENCE_VALUE(type, name) const type &to##name() const { return value<type>(); } void set##name(const type &t) { setValue<type>(t); }
  X_VALUE(bool, Bool);
  X_VALUE(xint32, Int);
  X_VALUE(xuint32, UnsignedInt);
  X_VALUE(float, Float);
  X_VALUE(xint64, LongInt);
  X_VALUE(xuint64, UnsignedLongInt);
  X_VALUE(double, Double);
  X_REFERENCE_VALUE(QString, String);
  X_REFERENCE_VALUE(XVector2D, Vector2D);
  X_REFERENCE_VALUE(XVector3D, Vector3D);
  X_REFERENCE_VALUE(XVector4D, Vector4D);
  X_REFERENCE_VALUE(XColour, Colour);
  X_REFERENCE_VALUE(XQuaternion, Quaternion);
  X_REFERENCE_VALUE(XVariantList, List);
#undef X_VALUE
#undef X_REFERENCE_VALUE

  friend EKSCORE_EXPORT QDataStream &operator>>(QDataStream &, XVariant &);
  friend EKSCORE_EXPORT QDataStream &operator<<(QDataStream &, const XVariant &);

private:
  void initiate( XMetaType::Type type, const void * );
  void clear();

  class XVariantData;
  XSharedPointer<XVariantData> _d;
  };

class XVariant::XVariantData : public XSharedData
  {
public:
  enum
    {
    BufferSize = sizeof(xuint64) * 2
    };

  XVariantData() : type(XMetaType::Null)
    {
    }

  XMetaType::Type type;
  union
    {
    void *data;
    xuint64 buffer[2];
    };
  };

template <typename T> XVariant::XVariant( const T &ref )
    : _d( new XVariantData )
  {
  initiate( XMetaType::typeOf(ref), &ref );
  }

template <typename T> XVariant &XVariant::operator=(const T &cpy)
  {
  initiate( XMetaType::typeOf(cpy), &cpy );
  return *this;
  }

template <typename T> void XVariant::setValue( const T &ref )
  {
  initiate( XMetaType::typeOf<T>(), &ref );
  }

template <typename T>const T &XVariant::value() const
  {
  const XVariantData *d = _d.constPtr();
  if(d->type == XMetaType::typeOf<T>())
    {
    if(XMetaType::sizeOf(d->type) < XVariantData::BufferSize)
      {
      return *(T*)d->buffer;
      }
    else
      {
      return *(T*)d->data;
      }
    }
  return *(T*)0;
  }

template <typename T>T &XVariant::value()
  {
  XVariantData *d = _d.ptr();
  if(d->type == XMetaType::typeOf<T>())
    {
    if(XMetaType::sizeOf(d->type) < XVariantData::BufferSize)
      {
      return *(T*)d->buffer;
      }
    else
      {
      return *(T*)d->data;
      }
    }
  return *(T*)0;
  }

template <typename T>T XVariant::valueAs() const
  {
  const XVariantData *d = _d.constPtr();
  if(d->type == XMetaType::typeOf<T>())
    {
    if(XMetaType::sizeOf(d->type) < XVariantData::BufferSize)
      {
      return *(T*)d->buffer;
      }
    else
      {
      return *(T*)d->data;
      }
    }
  T ret;
  if(XMetaType::sizeOf(d->type) < XVariantData::BufferSize)
    {
    XMetaType::convert(d->type, d->buffer, XMetaType::typeOf<T>(), &ret);
    }
  else
    {
    XMetaType::convert(d->type, d->data, XMetaType::typeOf<T>(), &ret);
    }
  return ret;
  }

#endif
#endif
