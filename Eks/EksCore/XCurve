#ifndef XCURVE_H
#define XCURVE_H

#include "XGlobal"
#include "XList"
#include "XVector2D"
#include "XVector3D"
#include "XVector4D"
#include "XMatrix4x4"

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XAbstractCurve Implementation
//--------------------------------------------------------------------------------------------------------------------------------------------

template <typename RETURN>
class XAbstractCurve
    {
public:
    virtual RETURN sample( xReal t ) const = 0;
    virtual xReal minimumT() const {return 0.0;}
    virtual xReal maximumT() const {return 1.0;}
    };

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XGenericCurveSegment Definition
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE, 1> ), XMatrix<xReal, SIZE, 1> (*FROMRETURN)( RETURN )>
class XGenericCurveSegment : public XAbstractCurve<RETURN>
    {
public:
    enum BasisMode { Bezier, Hermite };

    XGenericCurveSegment( BasisMode=Bezier );

    void setGeometricConstraints( RETURN one, RETURN two, RETURN thr, RETURN fou );
    void setGeometricConstraint( int, RETURN one );

    RETURN geometricConstraint( int ) const;

    void setBasis( BasisMode );
    void setBasis( const XMatrix4x4 & );

    RETURN sample( xReal t ) const;

private:
    XMatrix <xReal, 4, 4> _basis;
    XMatrix <xReal, SIZE, 4> _geom;
    XMatrix <xReal, SIZE, 4> _preMult;
    };

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XGenericCurve Definition
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE, 1> (*FROMRETURN)( RETURN )>
class XGenericCurve : public XAbstractCurve<RETURN>
    {
public:
    xReal minimumT() const;
    xReal maximumT() const;
    RETURN sample( xReal t ) const;

protected:
    const XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > &segments() const;
    void setSegments( const XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > & );

private:
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > _segments;
    };

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XKBSpline Definition
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
class XKBSpline : public XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>
    {
public:
    XKBSpline( uint );

    uint size() const;
    void resize( uint );

    void setPosition( uint, RETURN );
    void setT( uint, xReal );
    void setC( uint, xReal );
    void setB( uint, xReal );

private:
    void updateSegment( XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > &, uint segment );
    struct tcb { xReal t, c, b; };
    XList <tcb> _tcb;
    };

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XGenericCurveSegment Implementation
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::XGenericCurveSegment( BasisMode mode )
    {
    _geom.fill(0.0);
    setBasis( mode );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::setGeometricConstraints( RETURN oneGeneric,
                                                    RETURN twoGeneric,
                                                    RETURN thrGeneric,
                                                    RETURN fouGeneric )
    {
    XMatrix<xReal, SIZE,1> one( FROMRETURN( oneGeneric ) );
    XMatrix<xReal, SIZE,1> two( FROMRETURN( twoGeneric ) );
    XMatrix<xReal, SIZE,1> thr( FROMRETURN( thrGeneric ) );
    XMatrix<xReal, SIZE,1> fou( FROMRETURN( fouGeneric ) );
    for( int x=0; x<SIZE; x++ )
        {
        _geom(0,x) = one(0,x);

        _geom(1,x) = two(0,x);

        _geom(2,x) = thr(0,x);

        _geom(3,x) = fou(0,x);
        }
    _preMult = _basis * _geom;
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::setGeometricConstraint( int geo, RETURN constraint )
    {
    XMatrix<xReal, SIZE,1> one( FROMRETURN( constraint ) );
    for( int x=0; x<SIZE; x++ )
        {
        _geom(geo,x) = one(0,x);
        }
    _preMult = _basis * _geom;
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
RETURN XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::geometricConstraint( int geo ) const
    {
    XMatrix<xReal, SIZE,1> ret;
    for( int x=0; x<SIZE; x++ )
        {
        ret(0,x) = _geom(geo,x);
        }
    return TORETURN( ret );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::setBasis( const XMatrix4x4 &in )
    {
    _basis = in;
    _preMult = _basis * _geom;
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::setBasis( BasisMode mode )
    {
    if( mode == Bezier )
        {
        XMatrix4x4 mat;
        mat.row(0) = XVector4D( -1, 3, -3, 1 );
        mat.row(1) = XVector4D( 3, -6, 3, 0 );
        mat.row(2) = XVector4D( -3, 3, 0, 0 );
        mat.row(3) = XVector4D( 1, 0, 0, 0 );
        setBasis( mat );
        }
    else if( mode == Hermite )
        {
        XMatrix4x4 mat;
        mat.row(0) = XVector4D( 2, -2, 1, 1 );
        mat.row(1) = XVector4D( -3, 3, -2, -1 );
        mat.row(2) = XVector4D( 0, 0, 1, 0 );
        mat.row(3) = XVector4D( 1, 0, 0, 0 );
        setBasis( mat );
        }
    else
        {
        qWarning() << "Unrecognised Curve Mode";
        }
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
RETURN XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::sample( xReal t ) const
    {
    float tMult( t );
    XMatrix<xReal, 4, 1> tMat;
    tMat(0,3) = 1;
    tMat(0,2) = tMult;
    tMult *= t;
    tMat(0,1) = tMult;
    tMult *= t;
    tMat(0,0) = tMult;

    return TORETURN( tMat * _preMult );
    }

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XGenericCurve Implementation
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
xReal XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>::minimumT() const
    {
    return 0.0;
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
xReal XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>::maximumT() const
    {
    return _segments.size();
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
RETURN XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>::sample( xReal t ) const
    {
    if( t >= 0 && t < _segments.size() )
        {
        return _segments[(int)t].sample( t - (int)t );
        }
    else if( !_segments.isEmpty() )
        {
        if( t <= 0 )
            {
            return _segments.front().sample( 0.0 );
            }
        else
            {
            return _segments.back().sample( 1.0 );
            }
        }

    XMatrix<xReal, SIZE,1> ret;
    ret.fill( 0.0 );
    return TORETURN( ret );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
const XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > &XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>::segments() const
    {
    return _segments;
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XGenericCurve<SIZE,RETURN,TORETURN,FROMRETURN>::setSegments( const XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > &seg )
    {
    _segments = seg;
    }

//--------------------------------------------------------------------------------------------------------------------------------------------
//                                                      XKBSpline Implementation
//--------------------------------------------------------------------------------------------------------------------------------------------

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::XKBSpline( uint size )
    {
    resize( size );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
uint XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::size() const
    {
    return this->segments().size();
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::resize( uint x )
    {
    int size = x - 1;
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > segs( this->segments() );

    while( segs.size() > size && segs.size() > 0 )
        {
        segs.removeLast();
        }
    while( segs.size() < size )
        {
        segs << XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>( XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN>::Hermite );
        }

    while( (uint)_tcb.size() > x && _tcb.size() > 0 )
        {
        _tcb.removeLast();
        }
    while( (uint)_tcb.size() < x )
        {
        tcb newTCB;
        newTCB.t = 0.0;
        newTCB.c = 0.0;
        newTCB.b = 0.0;
        _tcb << newTCB;
        }

    setSegments( segs );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::setPosition( uint index, RETURN pos )
    {
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > segs( this->segments() );
    if( index < size() )
        {
        segs[index].setGeometricConstraint( 0, pos );
        }
    if( index > 0 )
        {
        segs[index-1].setGeometricConstraint( 1, pos );
        }
    updateSegment( segs, index-1 );
    updateSegment( segs, index );
    updateSegment( segs, index+1 );
    setSegments( segs );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::setT( uint index, xReal t )
    {
    _tcb[index].t = t;
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > segs( this->segments() );
    updateSegment( segs, index );
    setSegments( segs );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::setC( uint index, xReal c )
    {
    _tcb[index].c = c;
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > segs( this->segments() );
    updateSegment( segs, index );
    setSegments( segs );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::setB( uint index, xReal b )
    {
    _tcb[index].b = b;
    XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > segs( this->segments() );
    updateSegment( segs, index );
    setSegments( segs );
    }

template <int SIZE, typename RETURN, RETURN (*TORETURN)( XMatrix<xReal, SIZE,1> ), XMatrix<xReal, SIZE,1> (*FROMRETURN)( RETURN )>
void XKBSpline<SIZE,RETURN,TORETURN,FROMRETURN>::updateSegment( XList <XGenericCurveSegment<SIZE,RETURN,TORETURN,FROMRETURN> > &seg, uint index )
    {
    if( index > (uint)seg.size() )
        {
        return;
        }
    if( index == (uint)seg.size() )
        {
        seg.back().setGeometricConstraint(3,XVector3D(0,0,0));
        return;
        }
    else if( index == 0 )
        {
        seg.front().setGeometricConstraint(2,XVector3D(0,0,0));
        return;
        }

    int prevSeg( (int)index - 1 );
    if( (int)index < seg.size() && prevSeg >= 0 )
        {
        RETURN pM1( seg[prevSeg].geometricConstraint(0) );
        RETURN p ( seg[prevSeg].geometricConstraint(1) );
        RETURN pP1( seg[index].geometricConstraint(1) );

        tcb pointTCB( _tcb[index] );

        RETURN source( ( ( 0.5 * (1-pointTCB.t)*(1-pointTCB.c)*(1+pointTCB.b) ) * ( p - pM1 ) ) +
                       ( ( 0.5 * (1-pointTCB.t)*(1+pointTCB.c)*(1-pointTCB.b) ) * ( pP1 - p ) ));

        RETURN dest( ( ( 0.5 * (1-pointTCB.t)*(1+pointTCB.c)*(1+pointTCB.b) ) * ( p - pM1 ) ) +
                       ( ( 0.5 * (1-pointTCB.t)*(1-pointTCB.c)*(1-pointTCB.b) ) * ( pP1 - p ) ));

        seg[prevSeg].setGeometricConstraint( 3, source );
        seg[index].setGeometricConstraint( 2, dest );
        }
    }

XVector3D toVector3D( XMatrix<xReal, 3, 1> vec )
    {
    return XVector3D( vec(0,0), vec(0,1), vec(0,2) );
    }

 XMatrix<xReal, 3, 1> fromVector3D( XVector3D vec )
    {
    XMatrix<xReal, 3, 1> ret;
    ret(0,0) = vec.x();
    ret(0,1) = vec.y();
    ret(0,2) = vec.z();
    return ret;
    }

XVector2D toVector2D( XMatrix<xReal, 2, 1> vec )
    {
    return XVector2D( vec(0,0), vec(0,1) );
    }

 XMatrix<xReal, 2, 1> fromVector2D( XVector2D vec )
    {
    XMatrix<xReal, 2, 1> ret;
    ret(0,0) = vec.x();
    ret(0,1) = vec.y();
    return ret;
    }
xReal toXReal( XMatrix<xReal, 1, 1> vec )
    {
    return vec(0,0);
    }
XMatrix<xReal, 1, 1> fromXReal( xReal vec )
    {
    XMatrix<xReal, 1, 1> ret;
    ret(0,0) = vec;
    return ret;
    }

typedef XKBSpline<1,xReal,toXReal,fromXReal> XKBSpline1D;
typedef XKBSpline<2,XVector2D,toVector2D,fromVector2D> XKBSpline2D;
typedef XKBSpline<3,XVector3D,toVector3D,fromVector3D> XKBSpline3D;

#endif // XCURVE_H
