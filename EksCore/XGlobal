#ifndef XGLOBAL_H
#define XGLOBAL_H

#include "QtGlobal"

#ifdef EKSCORE_LIBRARY
# define EKSCORE_EXPORT Q_DECL_EXPORT
#else
# define EKSCORE_EXPORT Q_DECL_IMPORT
#endif

#define xAssert( arg ) Q_ASSERT( arg )

#if 0 && defined Q_OS_LINUX && __GNUC__
#   ifdef OSX
#       define xCurrentFunction "_No Function Info Available_"
#   else
#       if defined __cplusplus ? __GNUC_PREREQ (2, 6) : __GNUC_PREREQ (2, 4)
#           define xCurrentFunction	__PRETTY_FUNCTION__
#       else
#           if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#               define xCurrentFunction	__func__
#           else
#               define xCurrentFunction	"_No Function Info Available_"
#           endif
#       endif
#   endif
#else
#   define xCurrentFunction "_No Function Info Available_"
#endif

#define xTypeof( x ) typeof( x )

typedef float xReal;

template <typename T>T xMix( xReal t, const T &a, const T &b )
    {
    return ( (1-t) * a  ) + ( t * b );
    }

inline xReal xClamp( xReal in, xReal min, xReal max )
    {
    if( in < min )
        {
        return min;
        }
    else if( in > max )
        {
        return max;
        }
    return in;
    }

inline unsigned int xFactorial( unsigned int in )
    {
    // multiply 1 * 2 * 3 * ... * in
    unsigned int ret = 1;
    for( unsigned int x=2; x<=in; x++ )
        {
        ret *= x;
        }
    return ret;
    }

inline unsigned int xBinomialCoefficient( unsigned int n, unsigned int k )
    {
    // Find the coefficient of n and k...
    return xFactorial( n ) / ( ( xFactorial( n - k ) * xFactorial( k ) ) );
    }

#endif // XGLOBAL_H
