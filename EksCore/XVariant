#ifndef XXVariant_H
#define XXVariant_H

#include "XGlobal"
#include "XProperty"
#include "XList"
#include "XString"
#include "XVector2D"
#include "XVector3D"
#include "XVector4D"
#include "XColour"
#include "XQuaternion"
#include "QVariant"
#include "QTextStream"
#include "XMatrix3x3"
#include "XMatrix4x4"

#define X_XVARIANT_INLINE_REFERENCE_FROM_METHOD( name, type ) \
    void from##name( const type &in )                       \
        {                                                   \
        clear();                                            \
        _other = new type( in );                            \
        _type = name;                                       \
        }

#define X_XVARIANT_CONSTRUCTOR( name, type )                \
inline XVariant( type in ) : _type( Null )                  \
    {                                                       \
    from##name( in );                                       \
    }                                                       \
type to##name( ) const;                                     \
void from##name( type );

#define X_XVARIANT_REFERENCE_CONSTRUCTOR( name, type )      \
inline XVariant( const type &in ) : _type( Null )           \
    {                                                       \
    from##name( in );                                       \
    }                                                       \
type to##name( ) const;                                     \
X_XVARIANT_INLINE_REFERENCE_FROM_METHOD( name, type )

class XVariant;
typedef XList <XVariant> XVariantList;

class EKSCORE_EXPORT XVariant
    {
public:
    enum VariantType { Null,
                       String,
                       Bool,
                       Int,
                       UnsignedInt,
                       Char,
                       Double,
                       Vector2D,
                       Vector3D,
                       Vector4D,
                       List,
                       Matrix3x3,
                       Matrix4x4,
                       ByteArray,
                       QtVariant };
    XROProperty( VariantType, type )
public:
    XVariant();
    XVariant( const XVariant & );
    ~XVariant();
    bool isNull() const;
    void clear();
    XVariant &operator =( const XVariant & );
    void fromVariant( const XVariant & );

    X_XVARIANT_CONSTRUCTOR( Bool, bool )
    X_XVARIANT_CONSTRUCTOR( Int, int )
    X_XVARIANT_CONSTRUCTOR( UnsignedInt, unsigned int )
    X_XVARIANT_CONSTRUCTOR( Char, char )
    X_XVARIANT_CONSTRUCTOR( Double, double )

    XVariant( const char * );
    void fromCharString( const char * );

    XColour toColour() const;
    void fromColour( const XColour & );

    XVariant( XQuaternion );
    XQuaternion toQuaternion( ) const;
    void fromQuaternion( const XQuaternion & );

    XVariant( const QVariant & );
    QVariant toQVariant() const;
    void fromQVariant( const QVariant &in );

    enum PortableType { Binary, Ascii };
    QByteArray toPortable( PortableType=Ascii ) const;
    void fromPortable( QByteArray, PortableType=Ascii );

    X_XVARIANT_REFERENCE_CONSTRUCTOR( String, XString )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( ByteArray, QByteArray )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( Vector2D, XVector2D )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( Vector3D, XVector3D )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( Vector4D, XVector4D )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( List, XVariantList )

    X_XVARIANT_REFERENCE_CONSTRUCTOR( Matrix3x3, XMatrix3x3 )
    X_XVARIANT_REFERENCE_CONSTRUCTOR( Matrix4x4, XMatrix4x4 )

    template <typename T> inline void fromBasicTypeList( const XList <T> & );
    template <typename T> inline XList <T> toBasicTypeList( );
private:
    union
        {
        bool _bool;
        int _int;
        int _uint;
        char _char;
        double _double;
        void *_other;
        };
    };

EKSCORE_EXPORT QDataStream &operator<<( QDataStream &stream, const XVariant &var );
EKSCORE_EXPORT QDataStream &operator>>( QDataStream &stream, XVariant &var );

EKSCORE_EXPORT QDebug operator<<( QDebug, const XVariant & );

template <typename T> void XVariant::fromBasicTypeList( const QList <T> &list )
    {
    XString str;
        {
        QTextStream stream( &str );

        for( int x=0; x<list.size(); x++ )
            {
            stream << list[x];

            if( x < ( list.size()-1) )
                {
                stream << " ";
                }
            }
        }
    fromString( str );
    }

template <typename T> XList <T> XVariant::toBasicTypeList( )
    {
    XList <T> ret;
    XString str( toString() );
        {
        QTextStream stream( &str );

        qint64 oldPos( -1 );
        while( !stream.atEnd() && stream.pos() != oldPos )
            {
            oldPos = stream.pos();
            T type;
            stream >> type;
            stream.skipWhiteSpace();
            ret << type;
            }
        }
    return ret;
    }

#endif
